{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */const BASE_URL='https://mate.academy/students-api';// returns a promise resolved after a given delay\nfunction wait(delay){return new Promise(resolve=>{setTimeout(resolve,delay);});}// To have autocompletion and avoid mistypes\nfunction request(url){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'GET';let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;const options={method};if(data){// We add body and Content-Type only for the requests with data\noptions.body=JSON.stringify(data);options.headers={'Content-Type':'application/json; charset=UTF-8'};}// we wait for testing purpose to see loaders\nreturn wait(300).then(()=>fetch(BASE_URL+url,options)).then(response=>{if(!response.ok){throw new Error();}return response.json();});}export const client={get:url=>request(url),post:(url,data)=>request(url,'POST',data),patch:(url,data)=>request(url,'PATCH',data),delete:url=>request(url,'DELETE')};","map":{"version":3,"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","get","post","patch","delete"],"sources":["/Users/admin/Projects/TODO-app/src/utils/fetchClient.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n"],"mappings":"AAAA,uDACA,KAAM,CAAAA,QAAQ,CAAG,mCAAmC,CAEpD;AACA,QAAS,CAAAC,IAAIA,CAACC,KAAa,CAAE,CAC3B,MAAO,IAAI,CAAAC,OAAO,CAACC,OAAO,EAAI,CAC5BC,UAAU,CAACD,OAAO,CAAEF,KAAK,CAAC,CAC5B,CAAC,CAAC,CACJ,CAEA;AAGA,QAAS,CAAAI,OAAOA,CACdC,GAAW,CAGC,IAFZ,CAAAC,MAAqB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,IAC7B,CAAAG,IAAS,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAEhB,KAAM,CAAAI,OAAoB,CAAG,CAAEL,MAAO,CAAC,CAEvC,GAAII,IAAI,CAAE,CACR;AACAC,OAAO,CAACC,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CACnCC,OAAO,CAACI,OAAO,CAAG,CAChB,cAAc,CAAE,iCAClB,CAAC,CACH,CAEA;AACA,MAAO,CAAAhB,IAAI,CAAC,GAAG,CAAC,CACbiB,IAAI,CAAC,IAAMC,KAAK,CAACnB,QAAQ,CAAGO,GAAG,CAAEM,OAAO,CAAC,CAAC,CAC1CK,IAAI,CAACE,QAAQ,EAAI,CAChB,GAAI,CAACA,QAAQ,CAACC,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,CAAC,CACnB,CAEA,MAAO,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CACxB,CAAC,CAAC,CACN,CAEA,MAAO,MAAM,CAAAC,MAAM,CAAG,CACpBC,GAAG,CAAMlB,GAAW,EAAKD,OAAO,CAAIC,GAAG,CAAC,CACxCmB,IAAI,CAAEA,CAAInB,GAAW,CAAEK,IAAS,GAAKN,OAAO,CAAIC,GAAG,CAAE,MAAM,CAAEK,IAAI,CAAC,CAClEe,KAAK,CAAEA,CAAIpB,GAAW,CAAEK,IAAS,GAAKN,OAAO,CAAIC,GAAG,CAAE,OAAO,CAAEK,IAAI,CAAC,CACpEgB,MAAM,CAAGrB,GAAW,EAAKD,OAAO,CAACC,GAAG,CAAE,QAAQ,CAChD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}